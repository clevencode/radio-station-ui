// === Player Controls Module ===
// Respons√°vel por controlar o player de r√°dio (play, pause, pr√≥xima/voltar esta√ß√£o, exibir informa√ß√µes)
const PlayerControls = (() => {
  // Elementos do DOM relacionados ao player
  const audio = document.getElementById('radio-player');
  const playBtn = document.getElementById('play');
  const nextBtn = document.getElementById('next');
  const prevBtn = document.getElementById('prev');
  const coverArt = document.getElementById('cover-art');
  const bars = document.querySelectorAll('.bar');

  let isPlaying = false; // Estado do player
  let stations = [];     // Lista de esta√ß√µes carregadas
  let currentIndex = 0;  // √çndice da esta√ß√£o atual

  // Define as esta√ß√µes e exibe a primeira
  function setStations(newStations) {
    stations = newStations;
    currentIndex = 0;
    displayStation(currentIndex);
  }

  // Retorna o √≠ndice atual
  function getCurrentIndex() {
    return currentIndex;
  }

  // Define o √≠ndice atual e exibe a esta√ß√£o correspondente
  function setCurrentIndex(index) {
    currentIndex = index;
    displayStation(currentIndex);
  }

  // Retorna se est√° tocando ou n√£o
  function getIsPlaying() {
    return isPlaying;
  }

  // D√° play no √°udio e atualiza o bot√£o
  function play() {
    audio.play();
    playBtn.innerHTML = '&#10074;&#10074;';
    isPlaying = true;
  }

  // D√° pause no √°udio e atualiza o bot√£o
  function pause() {
    audio.pause();
    playBtn.innerHTML = '&#9658;';
    isPlaying = false;
  }

  // Exibe informa√ß√µes da esta√ß√£o atual
  function displayStation(index) {
    const station = stations[index];
    if (!station) return;
    document.querySelector('.track-info h3').innerText = station.name;
    document.querySelector('.track-info p').innerText = station.country || "Desconhecido";
    coverArt.style.backgroundImage = `url(${station.favicon || 'https://via.placeholder.com/150'})`;
    audio.src = station.url_resolved;
  }

  // Eventos dos bot√µes de controle
  playBtn.addEventListener('click', () => {
    isPlaying ? pause() : play();
  });

  nextBtn.addEventListener('click', () => {
    if (stations.length === 0) return;
    currentIndex = (currentIndex + 1) % stations.length;
    displayStation(currentIndex);
    if (isPlaying) play();
  });

  prevBtn.addEventListener('click', () => {
    if (stations.length === 0) return;
    currentIndex = (currentIndex - 1 + stations.length) % stations.length;
    displayStation(currentIndex);
    if (isPlaying) play();
  });

  // Anima√ß√£o das barras de √°udio
  audio.addEventListener('play', () => {
    bars.forEach(bar => bar.style.animationPlayState = 'running');
  });
  audio.addEventListener('pause', () => {
    bars.forEach(bar => bar.style.animationPlayState = 'paused');
  });

  // Exporta fun√ß√µes e vari√°veis necess√°rias
  return {
    setStations,
    getCurrentIndex,
    setCurrentIndex,
    getIsPlaying,
    play,
    pause,
    displayStation,
    audio
  };
})();

// === Station Selector Module ===
// Respons√°vel por atualizar e gerenciar o seletor de esta√ß√µes no <select>
const StationSelector = (() => {
  const stationSelector = document.getElementById('select-station');

  // Atualiza as op√ß√µes do seletor de esta√ß√µes
  function atualizarSeletorDeEstacoes(stations) {
    stationSelector.innerHTML = '<option value="">üéß Selecionar Esta√ß√£o</option>';
    if (stations.length === 0) {
      const opt = document.createElement('option');
      opt.value = "";
      opt.textContent = "Nenhuma esta√ß√£o dispon√≠vel";
      stationSelector.appendChild(opt);
      return;
    }
    stations.forEach((station, index) => {
      const opt = document.createElement('option');
      opt.value = index;
      opt.textContent = station.name;
      stationSelector.appendChild(opt);
    });
  }

  // Evento de mudan√ßa no seletor: troca a esta√ß√£o
  stationSelector.addEventListener('change', (e) => {
    const index = parseInt(e.target.value);
    if (!isNaN(index)) {
      PlayerControls.setCurrentIndex(index);
      if (PlayerControls.getIsPlaying()) PlayerControls.play();
    }
  });

  // Exporta fun√ß√£o de atualiza√ß√£o
  return {
    atualizarSeletorDeEstacoes
  };
})();

// === Station Fetcher Module ===
// Respons√°vel por buscar esta√ß√µes de r√°dio via API
const StationFetcher = (() => {
  // Busca esta√ß√µes pelo nome do pa√≠s
  async function fetchStationsByCountry(countryName) {
    const res = await fetch(`https://de1.api.radio-browser.info/json/stations/bycountry/${encodeURIComponent(countryName)}`);
    const stations = await res.json();
    PlayerControls.setStations(stations);
    StationSelector.atualizarSeletorDeEstacoes(stations);
    if (stations.length > 0 && PlayerControls.getIsPlaying()) PlayerControls.play();
    if (stations.length === 0) alert('Nenhuma r√°dio encontrada para este pa√≠s.');
  }
  return { fetchStationsByCountry };
})();

// === Country Detection Module ===
// Respons√°vel por detectar o pa√≠s do usu√°rio via idioma ou localiza√ß√£o
const CountryDetection = (() => {
  // Mapeamento de idiomas para pa√≠ses
  const mapaIdiomaParaPais = {
    'pt': 'Brazil',
    'pt-BR': 'Brazil',
    'en': 'United States',
    'en-US': 'United States',
    'fr': 'France',
    'fr-FR': 'France',
    'es': 'Spain',
    'es-ES': 'Spain',
    'de': 'Germany',
    'de-DE': 'Germany',
    'ht': 'Haiti',
    'ht-HT': 'Haiti'
  };

  // Detecta pa√≠s pelo idioma do navegador
  function detectarPaisPorIdioma() {
    const idioma = navigator.language || navigator.userLanguage;
    const paisDetectado = mapaIdiomaParaPais[idioma] || 'Brazil';
    StationFetcher.fetchStationsByCountry(paisDetectado);
  }

  // Detecta pa√≠s pelo idioma ou mostra seletor manual
  async function detectarOuSelecionarPais() {
    const idioma = navigator.language || navigator.userLanguage;
    const paisDetectado = mapaIdiomaParaPais[idioma];
    if (paisDetectado) {
      StationFetcher.fetchStationsByCountry(paisDetectado);
    } else {
      mostrarSeletorDePais();
    }
  }

  // Sucesso ao obter localiza√ß√£o geogr√°fica
  async function success(position) {
    const { latitude, longitude } = position.coords;
    const locationRes = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`);
    const locationData = await locationRes.json();
    const country = locationData.address.country;
    if (country) {
      StationFetcher.fetchStationsByCountry(country);
    } else {
      alert('N√£o foi poss√≠vel detectar sua localiza√ß√£o.');
    }
  }

  // Erro ao obter localiza√ß√£o
  function error(err) {
    alert('Erro ao obter localiza√ß√£o: ' + err.message);
  }

  // Exporta fun√ß√µes de detec√ß√£o
  return {
    detectarPaisPorIdioma,
    detectarOuSelecionarPais,
    success,
    error
  };
})();

// === Inicializa√ß√£o ===
// Detecta pa√≠s automaticamente ao carregar a p√°gina
CountryDetection.detectarPaisPorIdioma();
